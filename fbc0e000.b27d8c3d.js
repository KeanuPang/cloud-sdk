(window.webpackJsonp=window.webpackJsonp||[]).push([[87],{144:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return l})),n.d(t,"rightToc",(function(){return o})),n.d(t,"default",(function(){return b}));var a=n(2),r=n(6),s=(n(0),n(151)),i={title:"Use the OData client for JavaScript / TypeScript",sidebar_label:"OData v2 client API",description:"Use the SAP Cloud SDK for JavaScript to build and run OData v2 requests in a type-safe way.",keywords:["sap","cloud","sdk","odata","JavaScript","TypeScript","consume"]},l={unversionedId:"js/features/odata/odata-v2-client",id:"js/features/odata/odata-v2-client",isDocsHomePage:!1,title:"Use the OData client for JavaScript / TypeScript",description:"Use the SAP Cloud SDK for JavaScript to build and run OData v2 requests in a type-safe way.",source:"@site/docs/js/features/odata/odata-v2-client.mdx",permalink:"/cloud-sdk/docs/js/features/odata/odata-v2-client",editUrl:"https://github.com/SAP/cloud-sdk/edit/documentation/docs/js/features/odata/odata-v2-client.mdx",lastUpdatedBy:"Junjie Tang",lastUpdatedAt:1599422694,sidebar_label:"OData v2 client API",sidebar:"someSidebar",previous:{title:"Executing a request using a generated OData client",permalink:"/cloud-sdk/docs/js/features/odata/execute-odata-request"},next:{title:"Use the OData v4 client for JavaScript / TypeScript",permalink:"/cloud-sdk/docs/js/features/odata/odata-v4-client"}},o=[{value:"GetAll Request Builder",id:"getall-request-builder",children:[{value:"Select",id:"select",children:[]},{value:"Filter",id:"filter",children:[]},{value:"Skip",id:"skip",children:[]},{value:"Top",id:"top",children:[]},{value:"Count",id:"count",children:[]}]},{value:"GetByKey Request Builder",id:"getbykey-request-builder",children:[]},{value:"Create Request Builder",id:"create-request-builder",children:[{value:"Deep Create",id:"deep-create",children:[]}]},{value:"Update Request Builder",id:"update-request-builder",children:[]},{value:"Delete Request Builder",id:"delete-request-builder",children:[]},{value:"Handling of ETags",id:"handling-of-etags",children:[]},{value:"Handling of CSRF tokens",id:"handling-of-csrf-tokens",children:[]},{value:"Available Filter Expressions",id:"available-filter-expressions",children:[{value:"Filter Functions",id:"filter-functions",children:[]}]},{value:"Batch Requests",id:"batch-requests",children:[{value:"Retrieve request",id:"retrieve-request",children:[]},{value:"Changeset",id:"changeset",children:[]},{value:"Combining changesets and retrieve requests",id:"combining-changesets-and-retrieve-requests",children:[]}]}],c={rightToc:o};function b(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(s.b)("wrapper",Object(a.a)({},c,n,{components:t,mdxType:"MDXLayout"}),Object(s.b)("p",null,"In the following, the OData v2 features supported by the SAP Cloud SDK are explained using the ",Object(s.b)("a",Object(a.a)({parentName:"p"},{href:"https://api.sap.com/api/API_BUSINESS_PARTNER/resource"}),"Business Partner Service")," of SAP S/4HANA as an example."),Object(s.b)("p",null,"For more details on ",Object(s.b)("strong",{parentName:"p"},"how to execute requests")," using a (pre-)generated OData client refer to ",Object(s.b)("a",Object(a.a)({parentName:"p"},{href:"./execute-odata-request"}),"this documentation"),"."),Object(s.b)("h2",{id:"getall-request-builder"},"GetAll Request Builder"),Object(s.b)("p",null,"The GetAll request builder allows you to create a request to retrieve all entities that match the request configuration."),Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"BusinessPartner.requestBuilder().getAll();\n")),Object(s.b)("p",null,"The example above creates a request to get all BusinessPartner entities."),Object(s.b)("h3",{id:"select"},"Select"),Object(s.b)("p",null,"When reading entities, the API offers ",Object(s.b)("inlineCode",{parentName:"p"},"select( ... )")," on the builders. Through it, the query parameters ",Object(s.b)("inlineCode",{parentName:"p"},"$select")," and ",Object(s.b)("inlineCode",{parentName:"p"},"$expand")," are set. It restricts the response to the given selection of properties in the request."),Object(s.b)("p",null,"The properties that can be selected or expanded are represented via static fields on the entity class. So there will be a field for each property. E.g. the business partner entity has ",Object(s.b)("inlineCode",{parentName:"p"},"BusinessPartner.FIRST_NAME")," as a representation of a property and ",Object(s.b)("inlineCode",{parentName:"p"},"BusinessPartner.TO_BUSINESS_PARTNER_ADDRESS")," as a representation of a navigation property."),Object(s.b)("p",null,"A navigation property means that there is a relation between a business partner and their addresses. In this case, one business partner can have multiple addresses. In SAP S/4HANA, navigation properties typically start with ",Object(s.b)("inlineCode",{parentName:"p"},"TO_"),"."),Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"BusinessPartner.requestBuilder()\n  .getAll()\n  .select(\n    BusinessPartner.FIRST_NAME,\n    BusinessPartner.LAST_NAME,\n    BusinessPartner.TO_BUSINESS_PARTNER_ADDRESS\n  )\n  .execute(destination);\n")),Object(s.b)("p",null,"The above translates to the following query parameters:"),Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-sql"}),"$select=FirstName,LastName,to_BusinessPartnerAddress/*&$expand=to_BusinessPartnerAddress\n")),Object(s.b)("p",null,"One can also select properties of the expanded navigation property:"),Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"BusinessPartner.requestBuilder()\n  .getAll()\n  .select(\n    BusinessPartner.FIRST_NAME,\n    BusinessPartner.TO_BUSINESS_PARTNER_ADDRESS.select(\n      BusinessPartnerAddress.ADDRESS_ID,\n      BusinessPartnerAddress.CITY_CODE\n    )\n  )\n  .execute(destination);\n")),Object(s.b)("p",null,"The above translates to the following query parameters:"),Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-sql"}),"$select=FirstName,to_BusinessPartnerAddress/AddressID,to_BusinessPartnerAddress/CityCode&$expand=to_BusinessPartnerAddress\n")),Object(s.b)("h3",{id:"filter"},"Filter"),Object(s.b)("p",null,"When operating on a collection of entities the API offers ",Object(s.b)("inlineCode",{parentName:"p"},"filter( ... )")," on the builders. It directly corresponds to the ",Object(s.b)("inlineCode",{parentName:"p"},"$filter")," parameter of the request. Filters are also built via the static property fields on entities:"),Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"/*\n  Get all business partners that either:\n    - Have first name 'Alice' but not last name 'Bob'\n    - Or have first name 'Mallory'\n*/\nBusinessPartner.requestBuilder()\n  .getAll()\n  .filter(\n    or(\n      and(\n        BusinessPartner.FIRST_NAME.equals('Alice'),\n        BusinessPartner.LAST_NAME.notEquals('Bob')\n      ),\n      BusinessPartner.FIRST_NAME.equals('Mallory')\n    )\n  )\n  .execute(destination);\n")),Object(s.b)("p",null,"The example above will translate to this filter parameter:"),Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-sql"}),"$filter=(((FirstName eq 'Alice') and (LastName ne 'Bob')) or (FirstName eq 'Mallory'))\n")),Object(s.b)("p",null,"Take note of the order of ",Object(s.b)("inlineCode",{parentName:"p"},"and")," and ",Object(s.b)("inlineCode",{parentName:"p"},"or"),". As ",Object(s.b)("inlineCode",{parentName:"p"},"or")," is invoked on the result of ",Object(s.b)("inlineCode",{parentName:"p"},"and")," it will form the outer expression while ",Object(s.b)("inlineCode",{parentName:"p"},"and")," is an inner expression in the first branch of ",Object(s.b)("inlineCode",{parentName:"p"},"or"),"."),Object(s.b)("p",null,"It is also possible to pass multiple filters to the same filter function without concatenating them with ",Object(s.b)("inlineCode",{parentName:"p"},"and")," or ",Object(s.b)("inlineCode",{parentName:"p"},"or"),". They will be concatenated with ",Object(s.b)("inlineCode",{parentName:"p"},"and")," by default. The two following examples are equal:"),Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),".filter(\n  and(\n    BusinessPartner.FIRST_NAME.equals('Alice'),\n    BusinessPartner.LAST_NAME.notEquals('Bob')\n  )\n)\n")),Object(s.b)("p",null,"The example above can be shortened to:"),Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),".filter(\n  BusinessPartner.FIRST_NAME.equals('Alice'),\n  BusinessPartner.LAST_NAME.notEquals('Bob')\n)\n")),Object(s.b)("h4",{id:"filter-on-one-to-one-navigation-properties"},"Filter on One-To-One Navigation Properties"),Object(s.b)("p",null,"In addition to basic properties, filters can also be applied on one-to-one navigation properties. The example below shows how to filter on the ",Object(s.b)("inlineCode",{parentName:"p"},"TO_CUSTOMER"),", which is a one-to-one navigation property of the BusinessPartner entity. Please note, the ",Object(s.b)("inlineCode",{parentName:"p"},"CUSTOMER_NAME")," and ",Object(s.b)("inlineCode",{parentName:"p"},"CUSTOMER_FULL_NAME")," are properties of the entity ",Object(s.b)("inlineCode",{parentName:"p"},"Customer"),", which is the type of the one-to-one navigation property ",Object(s.b)("inlineCode",{parentName:"p"},"TO_CUSTOMER"),"."),Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"/*\n  Get all business partners that match all the following conditions:\n    - Have customer with the customer name 'name'\n    - Have customer with the customer full name 'fullName'\n*/\n.filter(\n  BusinessPartner.TO_CUSTOMER.filter(\n    Customer.CUSTOMER_NAME.equals('name'),\n    Customer.CUSTOMER_FULL_NAME.equals('fullName')\n  )\n)\n")),Object(s.b)("p",null,"The generated ",Object(s.b)("inlineCode",{parentName:"p"},"$filter")," will be:"),Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-sql"}),"$filter=((to_Customer/CustomerName eq 'name' and to_Customer/CustomerFullName eq 'fullName'))\n")),Object(s.b)("h4",{id:"more-filter-expressions"},"More Filter Expressions"),Object(s.b)("p",null,"More advanced filter expressions can be found ",Object(s.b)("a",Object(a.a)({parentName:"p"},{href:"#available-filter-expressions"}),"here"),"."),Object(s.b)("h3",{id:"skip"},"Skip"),Object(s.b)("p",null,Object(s.b)("inlineCode",{parentName:"p"},"skip")," allows you to skip a number of results in the requested set. It can be useful for paging:"),Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"BusinessPartner.requestBuilder().\n  .getAll()\n  .skip(10)\n")),Object(s.b)("p",null,"The example above retrieves all BusinessPartner entities except for the first 10 results."),Object(s.b)("h3",{id:"top"},"Top"),Object(s.b)("p",null,Object(s.b)("inlineCode",{parentName:"p"},"top")," limits the number of returned results. This can also be useful for paging:"),Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"BusinessPartner.requestBuilder().\n  .getAll()\n  .top(10)\n")),Object(s.b)("p",null,"The example above retrieves the first 10 BusinessPartner entities."),Object(s.b)("h3",{id:"count"},"Count"),Object(s.b)("p",null,"Not yet available."),Object(s.b)("h2",{id:"getbykey-request-builder"},"GetByKey Request Builder"),Object(s.b)("p",null,"The GetByKey request builder allows you to create a request to retrieve one entity based on its key:"),Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"BusinessPartner.requestBuilder().getByKey('id');\n")),Object(s.b)("p",null,"The example above retrieves the BusinessPartner with the id 'id'."),Object(s.b)("p",null,"The result can be restricted by applying the ",Object(s.b)("a",Object(a.a)({parentName:"p"},{href:"#select"}),"select")," function, same as in the ",Object(s.b)("a",Object(a.a)({parentName:"p"},{href:"#getall-request-builder"}),"GetAll")," request."),Object(s.b)("h2",{id:"create-request-builder"},"Create Request Builder"),Object(s.b)("p",null,"The Create request builder allows you to send a ",Object(s.b)("inlineCode",{parentName:"p"},"POST")," request to create a new entity:"),Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"const businessPartner = BusinessPartner.builder().build();\nBusinessPartner.requestBuilder().create(businessPartner);\n")),Object(s.b)("p",null,"In the example above we created an instance of BusinessPartner and sent it to the BusinessPartner service in a ",Object(s.b)("inlineCode",{parentName:"p"},"POST")," request."),Object(s.b)("h3",{id:"deep-create"},"Deep Create"),Object(s.b)("p",null,"It is also possible to create an entity together with related entities in a single request:"),Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"// build a business partner instance with one linked address\nconst businessPartner = BusinessPartner.builder()\n  .firstName('John')\n  .lastName('Doe')\n  .businessPartnerCategory('1')\n  .toBusinessPartnerAddress([\n    BusinessPartnerAddress.builder()\n      .country('DE')\n      .postalCode('14469')\n      .cityName('Potsdam')\n      .streetName('Konrad-Zuse-Ring')\n      .houseNumber('10')\n      .build()\n  ])\n  .build();\n\n// execute the create request\nBusinessPartner.requestBuilder()\n  .create(businessPartner)\n  .execute(myDestination);\n")),Object(s.b)("p",null,"You can also create an entity ",Object(s.b)("inlineCode",{parentName:"p"},"asChildOf")," another entity."),Object(s.b)("h2",{id:"update-request-builder"},"Update Request Builder"),Object(s.b)("p",null,"The Update request builder allows you to send ",Object(s.b)("inlineCode",{parentName:"p"},"PUT")," or ",Object(s.b)("inlineCode",{parentName:"p"},"PATCH")," requests. By default ",Object(s.b)("inlineCode",{parentName:"p"},"PATCH")," is used to only update the changed fields:"),Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"BusinessPartner.requestBuilder().update(businessPartner);\n")),Object(s.b)("p",null,"In the example above only the changed fields of the given ",Object(s.b)("inlineCode",{parentName:"p"},"businessPartner")," instance are sent to the BusinessPartner service using ",Object(s.b)("inlineCode",{parentName:"p"},"PATCH"),"."),Object(s.b)("p",null,"To update the whole entity use ",Object(s.b)("inlineCode",{parentName:"p"},"replaceWholeEntityWithPut"),":"),Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"BusinessPartner.requestBuilder()\n  .update(businessPartner)\n  .replaceWholeEntityWithPut();\n")),Object(s.b)("p",null,"This will send a ",Object(s.b)("inlineCode",{parentName:"p"},"PUT")," request and thereby replace the whole entity."),Object(s.b)("p",null,"Entities can only be updated if ",Object(s.b)("a",Object(a.a)({parentName:"p"},{href:"#handling-of-etags"}),"ETags")," match. If you want to force an update of the entity regardless of the ETag configure the request to ignore version identifiers with ",Object(s.b)("inlineCode",{parentName:"p"},"ignoreVersionIdentifier"),":"),Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"BusinessPartner.requestBuilder()\n  .update(businessPartner)\n  .ignoreVersionIdentifier();\n")),Object(s.b)("h2",{id:"delete-request-builder"},"Delete Request Builder"),Object(s.b)("p",null,"The Delete request builder allows you to create ",Object(s.b)("inlineCode",{parentName:"p"},"DELETE")," requests, that delete an entity."),Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"/*\n  The following won't work on the real SAP S/4HANA BusinessPartner service because BusinessPartners cannot be deleted.\n  We added this only for the sake of the example.\n*/\nBusinessPartner.requestBuilder().delete(businessPartner);\n")),Object(s.b)("p",null,"Entities can only be deleted if ",Object(s.b)("a",Object(a.a)({parentName:"p"},{href:"#handling-of-etags"}),"ETags")," match. If you want to force deletion of the entity regardless of the ETag configure the request to ignore version identifiers with ",Object(s.b)("inlineCode",{parentName:"p"},"ignoreVersionIdentifier"),":"),Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"BusinessPartner.requestBuilder()\n  .delete(businessPartner)\n  .ignoreVersionIdentifier();\n")),Object(s.b)("p",null,"You can also overwrite ETags using ",Object(s.b)("inlineCode",{parentName:"p"},"setVersionIdentifier"),":"),Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"BusinessPartner.requestBuilder()\n  .delete(businessPartner)\n  .setVersionIdentifier('etag');\n")),Object(s.b)("p",null,"In the example above the ETag 'ETag' is being used instead of the original one."),Object(s.b)("h2",{id:"handling-of-etags"},"Handling of ETags"),Object(s.b)("p",null,"An ",Object(s.b)("a",Object(a.a)({parentName:"p"},{href:"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/ETag"}),"ETag")," is a version identifier that is often used to implement an optimistic locking mechanism. The SAP Cloud SDK will try to read version identifiers from responses and set them when sending OData requests."),Object(s.b)("p",null,"Consider the following example:"),Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"async function modifyBusinessPartner(id) {\n  const destination = { url: 'https://my.s4-system.com' };\n\n  const businessPartner = await BusinessPartner.requestBuilder()\n    .getByKey(id)\n    .execute(myDestination);\n\n  // do some modification\n  applyModification(businessPartner);\n\n  return BusinessPartner.requestBuilder()\n    .update(businessPartner)\n    .execute(destination);\n}\n")),Object(s.b)("p",null,"When executing ",Object(s.b)("inlineCode",{parentName:"p"},"getAll")," and ",Object(s.b)("inlineCode",{parentName:"p"},"getByKey")," requests the SAP Cloud SDK will automatically attempt to extract the version identifier from the response and store it within the returned entity (",Object(s.b)("inlineCode",{parentName:"p"},"partner")," in the example above). When executing ",Object(s.b)("inlineCode",{parentName:"p"},"update")," requests the version identifier will be sent in the ",Object(s.b)("inlineCode",{parentName:"p"},"If-match")," request header."),Object(s.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(s.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-heading"}),Object(s.b)("h5",{parentName:"div"},Object(s.b)("span",Object(a.a)({parentName:"h5"},{className:"admonition-icon"}),Object(s.b)("svg",Object(a.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(s.b)("path",Object(a.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})))),"note")),Object(s.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-content"}),Object(s.b)("p",{parentName:"div"},"If a service requires this header to be sent: Fetching the entity from the service first is essential to ensure that the ETag is present and up to date."),Object(s.b)("p",{parentName:"div"},"By default an ETag is sent if it's present on the entity being modified. ",Object(s.b)("inlineCode",{parentName:"p"},"ignoreVersionIdentifier()")," will instead always send a ",Object(s.b)("inlineCode",{parentName:"p"},"*")," which acts as a wildcard to match all ETags."))),Object(s.b)("h2",{id:"handling-of-csrf-tokens"},"Handling of CSRF tokens"),Object(s.b)("p",null,"To create, update, and delete requests the SDK will try to send a ",Object(s.b)("a",Object(a.a)({parentName:"p"},{href:"https://en.wikipedia.org/wiki/Cross-site_request_forgery#Cookie-to-header_token"}),"CSRF token"),". Upon execution, the request will try to fetch a token first before issuing the create request. Many services require this behavior for security reasons. However, the create request will be made without a CSRF token if none could be obtained."),Object(s.b)("h2",{id:"available-filter-expressions"},"Available Filter Expressions"),Object(s.b)("h3",{id:"filter-functions"},"Filter Functions"),Object(s.b)("p",null,"There are predefined filter functions e. g. ",Object(s.b)("inlineCode",{parentName:"p"},"length"),", ",Object(s.b)("inlineCode",{parentName:"p"},"substring"),", ",Object(s.b)("inlineCode",{parentName:"p"},"substringOf")," in the core library, that allow for a wide range of filter expressions:"),Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"/*\n  Fetch all business partners who have a first name shorter than 5 letters\n*/\nBusinessPartner.requestBuilder()\n  .getAll()\n  .filter(length(BusinessPartner.FIRST_NAME).lessThan(5))\n  .execute(destination);\n")),Object(s.b)("h2",{id:"batch-requests"},"Batch Requests"),Object(s.b)("p",null,"OData batch requests combine multiple operations into one POST operation, allowing you to execute multiple requests with just one network call. This can significantly reduce the network overhead you have to deal with when you want to execute a large number of requests."),Object(s.b)("p",null,"An OData batch request can consist of a number of ",Object(s.b)("a",Object(a.a)({parentName:"p"},{href:"#retrieve-request"}),"retrieve requests")," and ",Object(s.b)("a",Object(a.a)({parentName:"p"},{href:"#changeset"}),"changesets"),"."),Object(s.b)("h3",{id:"retrieve-request"},"Retrieve request"),Object(s.b)("p",null,"A retrieve request is any HTTP ",Object(s.b)("inlineCode",{parentName:"p"},"GET")," request - in terms of the SAP Cloud SDK this includes all requests built by a ",Object(s.b)("a",Object(a.a)({parentName:"p"},{href:"#getall-request-builder"}),"GetAllRequestBuilder")," and ",Object(s.b)("a",Object(a.a)({parentName:"p"},{href:"#getbykey-request-builder"}),"GetByKeyRequestBuilder"),"."),Object(s.b)("p",null,"In the example below, a list of addresses is mapped in a ",Object(s.b)("a",Object(a.a)({parentName:"p"},{href:"#getbykey-request-builder"}),"GetByKeyRequestBuilder")," to form the read requests, which are then passed to the batch function."),Object(s.b)("p",null,"The batch request will return a list of ",Object(s.b)("inlineCode",{parentName:"p"},"BatchResponse")," items, which will be stored in the ",Object(s.b)("inlineCode",{parentName:"p"},"retrieveResponses")," variable. These ",Object(s.b)("inlineCode",{parentName:"p"},"BatchResponse")," items need to be parsed and converted to the expected entities."),Object(s.b)("p",null,Object(s.b)("inlineCode",{parentName:"p"},"ReadResponse")," contains an HTTP code, a body, an entity (in this case ",Object(s.b)("inlineCode",{parentName:"p"},"BusinessPartnerAddress"),"), and functions like ",Object(s.b)("inlineCode",{parentName:"p"},"as")," to convert the response into the entity and ",Object(s.b)("inlineCode",{parentName:"p"},"isSuccess"),"."),Object(s.b)("p",null,"The reduce function converts each of the ReadResponses to a BusinessPartnerAddress using the ",Object(s.b)("inlineCode",{parentName:"p"},"as")," function. The ",Object(s.b)("inlineCode",{parentName:"p"},"addresses")," variable is the accumulator and the ",Object(s.b)("inlineCode",{parentName:"p"},"[]")," is the initial value. We end up with a list of BusinessPartnerAddress."),Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"async getAddresses(businessPartnerAddresses: BusinessPartnerAddress[])\n:Promise<BusinessPartnerAddress[]> {\n  const retrieveRequests = businessPartnerAddresses.map(\n      address => BusinessPartnerAddress\n        .requestBuilder()\n        .getByKey(address.businessPartner, address.addressId)\n  );\n\n  const retrieveResponses = await batch(...retrieveRequests)\n    .execute(destination);\n\n  return retrieveResponses.reduce(\n    (addresses, response: ReadResponse) =>\n      [...addresses, ...response.as(BusinessPartnerAddress)]\n      , []\n  );\n}\n")),Object(s.b)("h3",{id:"changeset"},"Changeset"),Object(s.b)("p",null,"A changeset is a collection of HTTP ",Object(s.b)("inlineCode",{parentName:"p"},"POST"),", ",Object(s.b)("inlineCode",{parentName:"p"},"PUT"),", ",Object(s.b)("inlineCode",{parentName:"p"},"PATCH")," and ",Object(s.b)("inlineCode",{parentName:"p"},"DELETE")," operations - requests built by any ",Object(s.b)("a",Object(a.a)({parentName:"p"},{href:"#create-request-builder"}),"CreateRequestBuilder"),", ",Object(s.b)("a",Object(a.a)({parentName:"p"},{href:"#update-request-builder"}),"UpdateRequestBuilder")," and ",Object(s.b)("a",Object(a.a)({parentName:"p"},{href:"#delete-request-builder"}),"DeleteRequestBuilder")," in terms of the SAP Cloud SDK. The order of execution within a changeset is not defined as opposed to the whole batch request itself. Therefore the requests within a changeset should not depend on each other. If the execution of any of the requests within a changeset fails, the whole changeset will be reflected as an error in the response and will not be applied, much like a database transaction."),Object(s.b)("p",null,"In the example below, a list of addresses is mapped in an ",Object(s.b)("a",Object(a.a)({parentName:"p"},{href:"#update-request-builder"}),"UpdateRequestBuilder")," to form the update requests, which are then wrapped in a changeset and passed to the batch function."),Object(s.b)("p",null,"The batch request will return a single ",Object(s.b)("inlineCode",{parentName:"p"},"BatchResponse")," in a list, which is stored in the ",Object(s.b)("inlineCode",{parentName:"p"},"updateChangesetResponse")," variable."),Object(s.b)("p",null,Object(s.b)("inlineCode",{parentName:"p"},"WriteResponses")," contains the function ",Object(s.b)("inlineCode",{parentName:"p"},"isSuccess")," and the property ",Object(s.b)("inlineCode",{parentName:"p"},"responses")," which is a list of ",Object(s.b)("inlineCode",{parentName:"p"},"WriteResponse")," which contains an HTTP code, and can contain a body, an entity (in this case ",Object(s.b)("inlineCode",{parentName:"p"},"BusinessPartnerAddress"),") and the function ",Object(s.b)("inlineCode",{parentName:"p"},"as")," to convert the response into the entity."),Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"updateAddresses(businessPartnerAddresses: BusinessPartnerAddress[])\n:Promise<BusinessPartnerAddress[]> {\n  const updateRequests = businessPartnerAddresses.map(\n    address => BusinessPartnerAddress\n      .requestBuilder()\n      .update(address)\n  );\n\n  const [updateChangesetResponse] = await batch(changeset(...updateRequests))\n    .execute(destination);\n\n  return (updateChangesetResponse as WriteResponses)\n    .responses\n    .map(\n      response => response.as(BusinessPartnerAddress)\n    );\n}\n")),Object(s.b)("h3",{id:"combining-changesets-and-retrieve-requests"},"Combining changesets and retrieve requests"),Object(s.b)("p",null,"In the example below, the changesets will be executed first, and then retrieve requests will be executed sequentially afterward. The order of execution within the changeset is not defined.\nThe first ",Object(s.b)("inlineCode",{parentName:"p"},"BatchResponse")," will be the response to the changeset. The rest will be the responses for your retrieve requests."),Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"const [updateChangesetResponse, ...retrieveResponses] =\n  await batch(\n    changeset(...updateRequests),\n    ...retrieveRequests\n  )\n  .execute(destination);\n")))}b.isMDXComponent=!0},151:function(e,t,n){"use strict";n.d(t,"a",(function(){return u})),n.d(t,"b",(function(){return h}));var a=n(0),r=n.n(a);function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=r.a.createContext({}),b=function(e){var t=r.a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=b(e.components);return r.a.createElement(c.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},p=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,s=e.originalType,i=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),u=b(n),p=a,h=u["".concat(i,".").concat(p)]||u[p]||d[p]||s;return n?r.a.createElement(h,l(l({ref:t},c),{},{components:n})):r.a.createElement(h,l({ref:t},c))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=n.length,i=new Array(s);i[0]=p;var l={};for(var o in t)hasOwnProperty.call(t,o)&&(l[o]=t[o]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var c=2;c<s;c++)i[c]=n[c];return r.a.createElement.apply(null,i)}return r.a.createElement.apply(null,n)}p.displayName="MDXCreateElement"}}]);